// Generated by Apple Swift version 2.1 (swiftlang-700.1.101.6 clang-700.1.76)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import AVFoundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class AVCaptureVideoPreviewLayer;
@class AVCaptureOutput;
@class AVCaptureConnection;


/// Reader object base on the AVCaptureDevice to read / scan 1D and 2D codes.
SWIFT_CLASS("_TtC12QRCodeReader12QRCodeReader")
@interface QRCodeReader : NSObject <AVCaptureMetadataOutputObjectsDelegate>

/// CALayer that you use to display video as it is being captured by an input device.
@property (nonatomic, strong) AVCaptureVideoPreviewLayer * __nonnull previewLayer;

/// An array of strings identifying the types of metadata objects to process.
@property (nonatomic, readonly, copy) NSArray<NSString *> * __nonnull metadataObjectTypes;

/// Block is executing when a QRCode or when the user did stopped the scan.
@property (nonatomic, copy) void (^ __nullable completionBlock)(NSString * __nullable);

/// Initializes the code reader with an array of metadata object types.
///
/// \param metadataObjectTypes An array of strings identifying the types of metadata objects to process.
- (nonnull instancetype)initWithMetadataObjectTypes:(NSArray<NSString *> * __nonnull)types OBJC_DESIGNATED_INITIALIZER;

/// Switch between the back and the front camera.
- (void)switchDeviceInput;

/// Starts scanning the codes.
- (void)startScanning;

/// Stops scanning the codes.
- (void)stopScanning;

/// Indicates whether the session is currently running.
///
/// The value of this property is a Bool indicating whether the receiver is running.
/// Clients can key value observe the value of this property to be notified when
/// the session automatically starts or stops running.
@property (nonatomic, readonly) BOOL running;

/// Returns true whether a front device is available.
///
/// \returns  true whether the device has a front device.
- (BOOL)hasFrontDevice;

/// Returns true whether a torch is available.
///
/// \returns  true if a torch is available.
- (BOOL)isTorchAvailable;

/// Toggles torch on the default device.
- (void)toggleTorch;

/// Returns the video orientation correspongind to the given interface orientation.
///
/// \param orientation The orientation of the app's user interface.
+ (AVCaptureVideoOrientation)videoOrientationFromInterfaceOrientation:(UIInterfaceOrientation)orientation;

/// Checks whether the reader is available.
///
/// \returns  A boolean value that indicates whether the reader is available.
+ (BOOL)isAvailable;

/// Checks and return whether the given metadata object types are supported by the current device.
///
/// \param metadataTypes An array of strings identifying the types of metadata objects to check.
///
/// \returns  A boolean value that indicates whether the device supports the given metadata object types.
+ (BOOL)supportsMetadataObjectTypes:(NSArray<NSString *> * __nullable)metadataTypes;
- (void)captureOutput:(AVCaptureOutput * __null_unspecified)captureOutput didOutputMetadataObjects:(NSArray * __null_unspecified)metadataObjects fromConnection:(AVCaptureConnection * __null_unspecified)connection;
@end

@class NSCoder;


/// Convenient controller to display a view to scan/read 1D or 2D bar codes like the QRCodes. It is based on the AVFoundation framework from Apple. It aims to replace ZXing or ZBar for iOS 7 and over.
SWIFT_CLASS("_TtC12QRCodeReader26QRCodeReaderViewController")
@interface QRCodeReaderViewController : UIViewController

/// The completion blocak that will be called when a result is found.
@property (nonatomic, copy) void (^ __nullable completionBlock)(NSString * __nullable);

/// Initializes a view controller to read QRCodes from a displayed video preview and a cancel button to be go back.
///
/// :see: init(cancelButtonTitle:, metadataObjectTypes:)
///
/// \param cancelButtonTitle The title to use for the cancel button.
///
/// \param startScanningAtLoad Flag to know whether the view controller start scanning the codes when the view will appear.
- (nonnull instancetype)initWithCancelButtonTitle:(NSString * __nonnull)cancelButtonTitle startScanningAtLoad:(BOOL)startScanningAtLoad;

/// Initializes a reader view controller with a list of metadata object types.
///
/// :see: init(cancelButtonTitle:, metadataObjectTypes:)
///
/// \param metadataObjectTypes An array of strings identifying the types of metadata objects to process.
///
/// \param startScanningAtLoad Flag to know whether the view controller start scanning the codes when the view will appear.
- (nonnull instancetype)initWithMetadataObjectTypes:(NSArray<NSString *> * __nonnull)metadataObjectTypes startScanningAtLoad:(BOOL)startScanningAtLoad;

/// Initializes a view controller to read wanted metadata object types from a displayed video preview and a cancel button to be go back.
///
/// :see: init(cancelButtonTitle:, coderReader:, startScanningAtLoad:)
///
/// \param cancelButtonTitle The title to use for the cancel button.
///
/// \param metadataObjectTypes An array of strings identifying the types of metadata objects to process.
///
/// \param startScanningAtLoad Flag to know whether the view controller start scanning the codes when the view will appear.
- (nonnull instancetype)initWithCancelButtonTitle:(NSString * __nonnull)cancelButtonTitle metadataObjectTypes:(NSArray<NSString *> * __nonnull)metadataObjectTypes startScanningAtLoad:(BOOL)startScanningAtLoad;

/// Initializes a view controller using a cancel button title and a code reader.
///
/// \param cancelButtonTitle The title to use for the cancel button.
///
/// \param coderReader The code reader object used to scan the bar code.
///
/// \param startScanningAtLoad Flag to know whether the view controller start scanning the codes when the view will appear.
///
/// \param showSwitchCameraButton Flag to display the switch camera button.
///
/// \param showTorchButton Flag to display the toggle torch button. If the value is true and there is no torch the button will not be displayed.
- (nonnull instancetype)initWithCancelButtonTitle:(NSString * __nonnull)cancelButtonTitle coderReader:(QRCodeReader * __nonnull)reader startScanningAtLoad:(BOOL)startScan showSwitchCameraButton:(BOOL)showSwitch showTorchButton:(BOOL)showTorch OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillLayoutSubviews;

/// Starts scanning the codes.
- (void)startScanning;

/// Stops scanning the codes.
- (void)stopScanning;
@end

#pragma clang diagnostic pop
